# -*- sh -*-

# Embedded whitespace is a pain, so all shells compensate by doing magic
# with this literal expression - "$@" - which tells the shell to list all the arguments
# passed into this particular shell function from the command line, single-space-separated,
# and wrap any of the whitespace-containing arguments in (internally escaped) ' '- quotes.

# What's in this resource file that is difficult to deal with mentally, are the various
# games that have to be played with this "$@" technique, to get whitespace cleanly
# carried though to the target machines' command line.  It's not perfect, but workable.

# The key automation principles implemented, are these:

# 1. to use the (Name tags) naming conventions over configuration (via PCRE "$FILTER"),
# 2. to deal with a consistent inventory (Name tags) list as a whole via .bcsrc mgmt,
# 3. to introduce the basic "batch processing techniques" of ansible with errors (logging),
# 4. to farm out all the profile switching details to ssm_honorlock.sh (as an assoc array),
# 5. to farm out all the AWS ssm session txn management to a small (advanced) ~/.ssh/config,
# 6. introduce conceptual idempotency into the CLI mix.

# All of these principles will factor into the ansible orchestration work to come next.

declare -A EC2_ID

: "${EC2_BATCH:=4}"
export EC2_BATCH EC2_ID_SRC

declare -a _ec2_hosts
declare -ar _ec2_tools=(htop lsof strace curl)

_ec2_inventory_hosts_zsh() {
  local state
  _arguments '1: :->ec2_host'
  case $state in
    ec2_host)
      _arguments "1:ec2_host:($_ec2_hosts)"
      ;;
  esac
}

for fcn in ec2_list_inventory_filter ec2_push_ssh_public_key ec2_exec_terminal_filter \
  ec2_batch_shell_filter ec2_screen_exec_filter \
  ec2_htop_ship_config_filter_bg ec2_tools_ship_filter_bg ec2-ssm-helper.sh; do

  if [[ $(basename "$SHELL") == "zsh" ]]; then
    compdef _ec2_inventory_hosts_zsh $fcn
  else
    complete -W '${_ec2_hosts[@]}' $fcn
  fi
done

_ec2_load_inventory() {
  [[ -n "${BCS_PROFILE-}" ]] || return 0

  : "${EC2_ID_SRC:=$(
    ec2-ssm-helper.sh | while read -r host id; do
      [[ "$(basename "$SHELL")" == "bash" ]] && echo [$host]="$id" || echo "$host" "$id"
    done
  )}"
  eval "EC2_ID=( $EC2_ID_SRC )"

  if [[ $(basename "$SHELL") = "zsh" ]]; then
    eval '_ec2_hosts=("${(k)EC2_ID}")'
  else
    _ec2_hosts=("${!EC2_ID[@]}")
  fi
  return 0
}

ec2_list_inventory_filter() {
  ([[ "$(basename "$SHELL")" == "bash" ]] && echo "${!EC2_ID[@]}" || eval 'echo "${(k)EC2_ID}"') |
    tr ' ' '\n' | sort | grep -Pe "${1-}"
}

ec2_push_ssh_public_key() {
  local FILTER=${1-}
  local pubs="$(cat ~/.ssh/id_*.pub)"

  echo "$pubs" | grep -q "$USER@" || (
    echo "Invalid Public Key: $USER@ not found in : '$pubs'" >&2 && return 1
  )

  for host in $(ec2_list_inventory_filter "$FILTER"); do
    (
      sleep "${DELAY-20}"
      echo 'mkdir -p ~/.ssh'
      sleep 1
      echo grep "$USER@" '~/.ssh/authorized_keys' '||' \
        echo "$pubs" '>> ~/.ssh/authorized_keys'
      sleep 2
    ) | pty -n -- ec2-ssm-helper.sh "$host" &
  done
  wait
}

ec2_exec_terminal_filter() {
  local FILTER="${1-}"
  shift

  for host in $(ec2_list_inventory_filter "$FILTER"); do ssh -t "$host" "$@"; done
}

ec2_htop_ship_config_filter_bg() {
  local FILTER="${1-}"
  shift

  for host in $(ec2_list_inventory_filter "$FILTER"); do
    ssh "$host" sudo bash -c \
      '"cat > /home/ssm-user/.config/htop/htoprc"' <~/.config/htop/htoprc &
  done
  wait
}

ec2_screen_exec_filter() {
  local FILTER="${1-}"
  shift

  for host in $(ec2_list_inventory_filter "$FILTER"); do
    screen -X screen "$SHELL" -c \
      ". ~/.eksrc; . ~/.bcsrc; _bcs_title :$host:; ssh -t $host \"\$@\"" -- "$@"
  done
}

ec2_batch_shell_filter() {
  local FILTER="${1-}"
  shift

  if [[ -t 1 ]]; then
    # ANSI color indexes: black = 0, red = 1, green = 2
    # setaf = Set ANSI foreground
    # setab =  "   "   background
    # sgr0  = reset local color adjustments back to default terminal settings
    local errstr="$(tput bold)$(tput setaf 1)$(tput setab 0)error$(tput sgr0)"
    local prefix="$(tput bold)$(tput setaf 2){}$(tput sgr0)"
  else
    local errstr="error"
    local prefix="{}"
  fi

  ec2_list_inventory_filter "$FILTER" | xargs -P $EC2_BATCH -i ssh {} \
    bash -c '"(eval \"\$0\" \
      || echo \"'"$errstr"':\" \"(\"\$0\")\" failed with status code \$?) 2>&1 \
        | while read -r line; do echo \"'"$prefix"':\" \$line; done"' \""$@"\"
}

ec2_ship_tools_filter_bg() {
  local FILTER="${1-}"

  for host in $(ec2_list_inventory_filter "$FILTER"); do
    for t in "${_ec2_tools[@]}"; do
      ssh $host -- sh -c "mkdir -p /tmp/bin && cat >/tmp/bin/$t && chmod +x /tmp/bin/$t" <~/bin/$t &
    done
    ssh $host -- sh -c 'echo PATH="$PATH:/tmp/bin" > ~/.profile' &
  done

  wait
}

_ec2_load_inventory >/dev/null 2>&1
