# -*- sh -*-

alias gac='git add -u && _gtag commit'

alias gcommit='gac'

alias gpush='git push; git push --tags'

declare -A merge_strategy=([rebase]=theirs [merge]=theirs)

_gtag() {
  local ts rv branch="$(git branch --show-current)"
  [[ "$#" -eq 0 ]] && echo "USAGE: _gtag <gitcmd> [<args> ...]" >&2 && return 1

  if ! pushd "${PWD%%/rsim*}/rsim" >/dev/null 2>&1; then
    git "$@"
    return "$?"
  fi

  if [[ -n "${merge_strategy[$1]-}" ]]; then
    git checkout --"${merge_strategy[$1]}" rsim/src/{rsim.g,ClearPrice.src}
  fi

  ts="$(bash -ci ". '$PWD'/scripts/rsim-version.sh timestamp" 2>/dev/null |
    awk '/updated with/ {print $4}' | tr : - | head -n 1)"
  git add rsim/src/{rsim.g,ClearPrice.src}

  popd || return "$?"

  git "$@"
  rv="$?"

  [[ "$rv" == 0 && -n "$ts" ]] && git tag "${ts%.}" && echo tagged "${ts%.}"
  return "$rv"
}

gpull() {
  # USAGE: gpull [<branch> [<(merge|rebase)-arguments>...]]

  if [[ -n "$(git status --porcelain --untracked-files=no 2>/dev/null)" ||
  "$?" -gt 0 ]]; then
    echo "Working copy has uncommitted modifications ..." >&2
    git status --untracked-files=no
    return 1
  fi

  local my_branch="$(git branch --show-current)"
  git fetch origin "$my_branch" || return $?
  git rebase "origin/$my_branch" "${@:2:$#}"
  local rv="$?"

  if [[ "$rv" -gt 0 && "${PWD%/rsim*}" != "$PWD" ]]; then
    _gtag rebase --continue
    rv="$?"
  fi

  [[ "$rv" -eq 0 && "$#" -gt 0 ]] || return "$rv"
  local their_branch="$1"
  shift

  git fetch origin "$their_branch" || return "$?"
  git merge "origin/$their_branch" --verify-signatures \
    -m "merging 'origin/$their_branch' into '$my_branch'" "$@"
  rv="$?"

  if [[ "$rv" -gt 0 && "${PWD%/rsim*}" != "$PWD" ]]; then
    _gtag merge --continue
    rv="$?"
  fi

  return "$rv"
}

gcots() {
  [[ "$#" -eq 0 ]] && echo "USAGE: gcots <timestamp>" >&2 && return 1
  local branch="adam_dev" ts="$1"
  [[ "${ts%E?T}" != "$ts" ]] && branch="joe_dev"
  [[ "${ts#*.}" == "$ts" ]] && ts="$branch.$ts"
  git checkout "${ts//:/-}"
}
