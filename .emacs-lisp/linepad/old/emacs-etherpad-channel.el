;;;
;; SETTING UP A CHANNEL
;;;

(clear-rudel-log-etherpad-messages)
(rudel-log-etherpad-message "STARTING")

;;;
;; STEP -1: PRELIMINARIES - SET VARIABLES AND PREPARE EMACS ENVIRONMENT
;;;

(setq host             "metameso.org"
      port             9000
      pad-name         pad-name
      id-val           (number-to-string (random 1e12))
      key-val          (number-to-string (random 1e12))
      finished         nil
      counter          1)

(dolist (b (buffer-list))
  (with-current-buffer b
    (when (string-match-p "http" (buffer-name))
      (kill-buffer))))

(rudel-log-etherpad-message 
 (format "The ID for this session is %s" id-val))

;;;
;; STEP 0: MAKE SURE THE PAD EXISTS AND GET INITIAL VALUES FOR USER VARS 
;;;

(rudel-etherpad-ensure-pad host port pad-name)

;; the `default-user-vars' will take the form defined in
;; `rudel-etherpad-analyze-pad-json'

;; baserev should eventually be part of the user vars, I
;; think (it is actually equal to `revision'
(setq default-user-vars (with-temp-buffer
                          (insert cache-pad-html)
                          ;; find the
                          (goto-char (point-min))
                          (search-forward "var clientVars = ")
                          (let ((beg (point)))
                            (search-forward "  // ]]>")
                            (rudel-etherpad-analyze-pad-json
                             (buffer-substring-no-properties
                              beg (match-beginning 0))))))

;;;
;; STEP 1: GET REQUEST -- OPEN COMET CHANNEL
;; new=yes&create=yes
;;;

;; + v version parameter (=2)
;; + r parameter is random generated by the client [0, 1e12]
;; + id parameter is random generated by the client [0, 1e12]

(let ((url-request-extra-headers
       (list
        (cons "Connection" "keep-alive")
        (cons "Keep-Alive" "115")
        (cons "Referer" (format
                         "http://%s:%d/%s"
                         host port pad-name)))))
  (rudel-etherpad-handle-http-request
   (format "http://%s:%d/comet/channel?v=2&r=%%s&id=%s&channel=shortpolling&new=yes&create=yes&seq=0"
           host port id-val)
   'get))
                                        ;(sleep-for 1.0)

;;;
;; STEP 2 : GET REQUEST -- OPEN COMET CHANNEL PT. 2.
;;;

(let ((url-request-extra-headers
       (list
        (cons "Connection" "keep-alive")
        (cons "Keep-Alive" "115")
        (cons "Referer" (format
                         "http://%s:%d/%s"
                         host port pad-name)))))
  (rudel-etherpad-handle-http-request
   (format "http://%s:%d/comet/channel?v=2&r=%%s&id=%s&channel=shortpolling&seq=0"
           host port id-val)
   'get))
                                        ;(sleep-for 1.0)

;;;
;; STEP 3 : POST REQUEST -- SET CHANNEL PARAMETERS
;; body: oob=useChannel%3A1%3Ashortpolling
;;;

(let ((url-request-data "oob=useChannel%3A1%3Ashortpolling")
      (url-request-extra-headers
       (list (cons "Content-Type" "application/x-www-form-urlencoded"))))
  (rudel-etherpad-handle-http-request
   (format "http://%s:%d/comet/post?v=2&r=%%s&id=%s&seq=0"
           host port id-val)
   'post))
                                        ;(sleep-for 1.0)

;;;
;; STEP 4 : GET REQUEST -- FIRST STREAMING CHANNEL
;;;

(let ((url-request-extra-headers
       (list
        (cons "Connection" "keep-alive")
        (cons "Keep-Alive" "115")
        (cons "Referer" (format
                         "http://%s:%d/%s"
                         host port pad-name)))))
  (rudel-etherpad-handle-http-request
   (format "http://%s:%d/comet/channel?v=2&r=%%s&id=%s&channel=streaming&new=yes&create=yes&seq=0"
           host port id-val)
   'get))
                                        ;(sleep-for 1.0)

;;;
;; STEP 5 : POST REQUEST -- ANNOUNCING THE CLIENT?
;; body: an 'm' ------ generated from `default-user-vars' etc
;;;

(let ((url-request-data
       (concat "m=" (rudel-etherpad-make-m-value
                     pad-name user-handle
                     4 default-user-vars)))
      (url-request-extra-headers
       (list 
        (cons "Content-Type"
              "application/x-www-form-urlencoded"))))
  (rudel-etherpad-handle-http-request
   (format "http://%s:%d/comet/post?v=2&r=%%s&id=%s&seq=0"
           host port id-val)
   'post))
                                        ;(sleep-for 1.0)

;;;
;; STEP 6 : GET REQUEST -- ASK FOR AN XHRXDFRAME
;; Note that this request is sent to a funny "URI", using
;; the `key-val' to identify the client
;;;

(let ((url-request-extra-headers
       (list
        (cons "Connection" "keep-alive")
        (cons "Keep-Alive" "115")
        (cons "Referer" (format
                         "http://%s:%d/%s"
                         host port pad-name)))))
  ;; this will be used as a referer
  (rudel-etherpad-handle-http-request
   (format "http://%s.comet.%s:%d/comet/xhrXdFrame"
           key-val host port)
   'get))

;;;
;; STEP 7a: POST REQUEST -- SET UP A STREAMING CHANNEL
;; body: oob=useChannel%3A2%3Astreaming
;;;

(let ((url-request-data "oob=useChannel%3A2%3Astreaming")
      (url-request-extra-headers
       (list (cons "Content-Type" "application/x-www-form-urlencoded"))))
  (rudel-etherpad-handle-http-request
   (format "http://%s:%d/comet/post?v=2&r=%%s&id=%s&seq=0"
           host port id-val)
   'post))

;;;
;; STEP 7b : GET REQUEST -- CONFIRM RECEIPT OF STREAMING CHANNEL?
;;;

(let ((url-request-extra-headers
       (list
        (cons "Connection" "keep-alive")
        (cons "Keep-Alive" "115")
        (cons "Content-Type" "application/x-www-form-urlencoded")
        (cons "Referer" (format
                         "http://%s:%d/%s"
                         host port pad-name)))))
  (rudel-etherpad-handle-http-request
   (format "http://%s:%d/comet/channel?v=2&r=%%s&id=%s&channel=streaming&new=yes&create=yes&seq=0"
           host port id-val)
   'get))

;;;
;; STEP 8: GET REQUEST - SHORTPOLLING CHANNEL
;;;

(let ((url-request-extra-headers
       (list
        (cons "Connection" "keep-alive")
        (cons "Keep-Alive" "115")
        (cons "Content-Type" "application/x-www-form-urlencoded")
        (cons "Referer" (format
                         "http://%s:%d/%s"
                         host port pad-name)))))
  (rudel-etherpad-handle-http-request
   (format "http://%s:%d/comet/channel?v=2&r=%%s&id=%s&channel=shortpolling&seq=0"
           host port id-val)
   'get))

;;;
;; STEP 8: GET REQUEST - LONGPOLLING CHANNEL
;;;

(let ((url-request-extra-headers
       (list
        (cons "Connection" "keep-alive")
        (cons "Keep-Alive" "115")
        (cons "Referer" (format "http://%s.%s:%d/comet/xhrXdFrame"
                                key-val host port id-val)))))
  (rudel-etherpad-handle-http-request
   (format "http://%s:%d/comet/channel?v=2&r=%%s&id=%s&channel=longpolling&new=yes&create=no&seq=0"
           host port id-val)
   'get))
                                        ;(sleep-for 1.0)

;;;
;; STEP N : Finishing
;;;

(rudel-log-etherpad-message "FINISHING")
