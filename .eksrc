# -*- sh -*-

export EKS_CLUSTERS_SRC EKS_PODS_SRC
declare -a _eks_clusters _eks_pods

eks_list_clusters_filter() {
  local FILTER="${1-}"
  for c in "${_eks_clusters[@]}"; do echo "$c"; done | grep -Pe "$FILTER"
}

eks_list_pods_filter() {
  local FILTER="${1-}"
  for c in "${_eks_pods[@]}"; do echo "$c"; done | grep -Pe "$FILTER"
}

_eks_load_clusters() {
  [ -n "$BCS_PROFILE" ] || return 0
  : "${EKS_CLUSTERS_SRC:=$(aws eks list-clusters --output text | awk '{print $2}')}"
  eval "_eks_clusters=($EKS_CLUSTERS_SRC)"
  EKS_PODS_SRC=
  return 0
}

_eks_load_pods() {
  : "${EKS_PODS_SRC:=$(kubectl get pods | (
    read -r _
    awk '{print $1}'
  ))}"
  eval "_eks_pods=($EKS_PODS_SRC)"
  return 0
}

_eks_unload_clusters() {
  local role="$(echo "$BCS_PROFILE" | cut -d@ -f1)"
  local account_identifier="$(echo "$BCS_PROFILE" | cut -d@ -f2 | cut -d. -f1)"
  local region="$(echo "$BCS_PROFILE" | cut -d@ -f2 | cut -d. -f2)"
  for c in $(eks_list_clusters_filter "$@"); do
    kubectl config "delete-cluster arn:aws:eks:$region:$(bcs_get_account_number "$account_identifier")/cluster/$c"
    kubectl config delete-context "arn:aws:eks:$region:$(bcs_get_account_number "$account_identifier")/cluster/$c"
  done
}

eks_update_kubeconfig() {
  aws eks update-kubeconfig --name "$1"
  EKS_PODS_SRC=
  _eks_load_pods
}

declare -ar _eks_tools=(curl htop strace lsof)

eks_ship_pod_container_tools_filter() {
  local FILTER="${1-}"
  local container="${2---}"
  [[ "$container" == "--" ]] && container=""

  for pod in $(eks_list_pods_filter "$FILTER"); do
    [ -n "$container" ] && pod+=" -c"
    for t in "${_eks_tools[@]}"; do
      time kubectl exec -i $pod $container -- sh -c "mkdir -p /tmp/bin && cat >/tmp/bin/$t && chmod +x /tmp/bin/$t" <~/bin/$t &
    done
    kubectl exec --logtostderr $pod $container -- sh -c 'echo PATH="$PATH:/tmp/bin" > ~/.profile' &
  done

  wait
}

eks_send_pod_container_bpftrace_kheaders_filter() {
  local FILTER="${1-}"
  local container="${2---}"

  [[ "$container" == "--" ]] && container=""

  for pod in $(eks_list_pods_filter "$FILTER"); do
    [[ -n "$container" ]] && pod+=" -c"

    time kubectl exec -i $pod $container -- sh -c 'mkdir -p /tmp/kheaders-$(uname -r) && cd /tmp/kheaders-$(uname -r) && tar -xJf -' </sys/kernel/kheaders.tar.xz &
    time kubectl exec -i $pod $container -- sh -c 'mkdir -p /tmp/bin && cat >/tmp/bin/bpftrace && chmod +x /tmp/bin/bpftrace' <~/bin/bpftrace &
  done

  wait
}

eks_curl_pod_container() {
  local pod="$1"
  local container="${2---}"
  shift
  [[ $# -gt 0 ]] && shift
  [[ "$container" == "--" ]] && container=""
  [[ -n "$container" ]] && pod+=" -c"

  kubectl exec -ti $pod $container -- /tmp/bin/curl "$@"
}

eks_htop_pod_container() {
  local pod="$1"
  local container="${2---}"
  shift
  [[ $# -gt 0 ]] && shift
  [[ "$container" == "--" ]] && container=""
  [[ -n "$container" ]] && pod+=" -c"

  kubectl exec -ti $pod $container -- sh -lc 'htop "$@"' -- "$@"
}

eks_strace_pod_container() {
  local pod="$1"
  local container="${2---}"
  shift
  [[ $# -gt 0 ]] && shift
  [[ "$container" == "--" ]] && container=""
  [[ -n "$container" ]] && pod+=" -c"

  [[ $# -eq 0 ]] && set -- -p 1

  kubectl exec -ti $pod $container -- /tmp/bin/strace "$@"
}

eks_bpftrace_pod_container_ship_stdin() {
  local pod="$1"
  local container="${2---}"
  shift
  [[ $# -gt 0 ]] && shift
  [[ "$container" == "--" ]] && container=""
  [[ -n "$container" ]] && pod+=" -c"

  local e="sed"
  while [[ $# -gt 1 ]]; do
    e+=" -e 's!$1!$2!g'"
    shift
    shift
  done

  eval "$e" | kubectl exec -ti $pod $container -- /tmp/bin/bpftrace -
}

eks_bpftrace_pod_container_cli() {
  local pod="$1"
  local container="${2---}"
  shift
  [[ $# -gt 0 ]] && shift
  [[ "$container" == "--" ]] && container=""
  [[ -n "$container" ]] && pod+=" -c"

  kubectl exec -ti $pod $container -- /tmp/bin/bpftrace "$@"
}


function eks_screen_filter_terminal_shell() {
  local FILTER="$1"
  local container="${2---}"
  shift
  [[ $# -gt 0 ]] && shift
  [[ "$container" == "--" ]] && container=""

  for pod in $(eks_list_pods_filter "$FILTER"); do
  [[ -n "$container" ]] && pod+=" -c"
    screen -X screen "$SHELL" -c \
      ". ~/.eksrc; . ~/.bcsrc; _bcs_title $pod $container; kubectl exec -ti $pod $container -- sh -lc '\"\$@\"'" -- "$@"
  done
}

_eks_cluster_completion_zsh() {
  local state

  _arguments '1: :->eks_cluster'

  case $state in
    eks_cluster)
      _arguments "1:eks_cluster:($_eks_clusters)"
      ;;
  esac
}

_eks_pod_completion_zsh() {
  local state

  _arguments '1: :->eks_pod'

  case $state in
    eks_pod)
      _arguments "1:eks_pod:($_eks_pods)"
      ;;
  esac

}

if [[ "$(basename "$SHELL")" == "zsh" ]]; then
  compdef _eks_cluster_completion_zsh eks_list_clusters_filter
  compdef _eks_cluster_completion_zsh eks_update_kubeconfig
  compdef _eks_pod_completion_zsh eks_list_pods_filter
  compdef _eks_pod_completion_zsh eks_ship_pod_container_tools_filter
  compdef _eks_pod_completion_zsh eks_send_pod_container_bpftrace_kheaders_filter
  compdef _eks_pod_completion_zsh eks_strace_pod_container
  compdef _eks_pod_completion_zsh eks_bpftrace_pod_container_ship_stdin
  compdef _eks_pod_completion_zsh eks_bpftrace_pod_container_cli
  compdef _eks_pod_completion_zsh eks_curl_pod_container
  compdef _eks_pod_completion_zsh eks_screen_filter_terminal_exec
else
  complete -W '${_eks_clusters[@]}' eks_list_clusters_filter
  complete -W '${_eks_clusters[@]}' eks_update_kubeconfig
  complete -W '${_eks_pods[@]}' eks_list_pods_filter
  complete -W '${_eks_pods[@]}' eks_ship_pod_container_tools_filter
  complete -W '${_eks_pods[@]}' eks_send_pod_container_bpftrace_kheaders_filter
  complete -W '${_eks_pods[@]}' eks_strace_pod_container
  complete -W '${_eks_pods[@]}' eks_bpftrace_pod_container_ship_stdin
  complete -W '${_eks_pods[@]}' eks_bpftrace_pod_container_cli
  complete -W '${_eks_pods[@]}' eks_curl_pod_container
  complete -W '${_eks_pods[@]}' eks_screen_filter_terminal_exec
fi

_eks_load_clusters >/dev/null 2>&1
_eks_load_pods >/dev/null 2>&1
