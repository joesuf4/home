# -*- sh -*-

declare -ax _eks_clusters _eks_pods _bcs_tools _bcs_cmds words
declare -ax _eks_pod_cmds=(list-pods list-pod-containers)
declare -ax _eks_cluster_cmds=(list-clusters update-kubeconfig)
declare -ax _eks_cmds=("${_eks_pod_cmds[@]}" "${_eks_cluster_cmds[@]}")
declare -ax _eks_pods_flags=("--selector=")

export EKS_CLUSTERS_SRC EKS_PODS_SRC EKS_POD_SEARCH_LIMIT

: "${EKS_POD_SEARCH_LIMIT:=4}"

_eks_usage() {
  cat <<EOF
list-clusters              Show available AWS kubernetes clusters for the
                           current AWS role

                           ===

update-kubeconfig          Select current kubernetes cluster/context.
                           [<args>]
                             1. Name of cluster
                           Notes: Defaults to currently selected cluster
                           (shown in your xterm window), which effectively
                           reloads the AWS eks config and its pod inventory.

                           ===

list-pods                  List the available pods for this current kubernetes
                           context.
                           [<args>]
                             1. PCRE pod name filter
                           Notes:
                           The pod name filter argument will also accept the
                           following long-flag prefixes (that you can complete
                           yourself):

                               ${_eks_pods_flags[@]}

                           ===

list-pod-containers        List the available containers for the given pod
                           filter.
                           [<args>]
                             1. PCRE pod name filter (see "list-pods" note)
                             2. PCRE container name filter

EOF
}

_eks_zsh_clusters_completion() {
  local state

  _arguments '1: :->eks_cluster'

  case $state in
    eks_cluster)
      _arguments "1:eks_cluster:($_eks_clusters)"
      ;;
  esac
}

_eks_zsh_pod_container_completion() {
  local state

  _arguments '1: :->eks_pod' '2: :->eks_container'

  case $state in
    eks_pod)
      _arguments "1:eks_pod:($_eks_pods)"
      ;;
    eks_container)
      compadd "$@" $(eks_list_pod_containers "${words[2]}")
      ;;
  esac
}

_eks_zsh_completion() {
  local state
  _arguments '1: :->eks_cmd' '2: :->eks_pod' '3: :->eks_container'

  case $state in
    eks_cmd)
      _arguments "1:eks_cmd:($_eks_cmds $_bcs_cli_cmds)"
      ;;
    eks_pod)
      if [[ "${words[2]}" == list-clusters || "${words[2]}" == update-kubeconfig ]]; then
        _arguments "2:eks_cluster:($_eks_clusters)"
      else
        _arguments "2:eks_pod:($_eks_pods)"
      fi
      ;;
    eks_container)
      compadd "$@" $(eks_list_pod_containers "${words[3]}")
      ;;
  esac
}

for fcn in "${_eks_cluster_cmds[@]//-/_}"; do
  if [[ "$(basename "$SHELL")" == zsh ]]; then
    compdef _eks_zsh_clusters_completion eks_$fcn
  else
    complete -W '${_eks_clusters[@]}' eks_$fcn
  fi
done

for fcn in "${_bcs_cmds[@]//-/_}" "${_eks_pod_cmds[@]//-/_}"; do
  if [[ "$(basename "$SHELL")" == zsh ]]; then
    compdef _eks_zsh_pod_container_completion eks_$fcn
  else
    complete -W '${_eks_pods[@]}' eks_$fcn
  fi
done

eks_list_clusters() {
  local FILTER="${1-}"
  for c in "${_eks_clusters[@]}"; do echo "$c"; done | grep -Pe "$FILTER"
}

eks_list_pods() {
  local FILTER="${1-}"
  if [[ ! "${FILTER}" == "${FILTER#--}" ]]; then
    local EKS_PODS_SRC
    local _eks_pods
    _eks_load_pods "$FILTER"
    FILTER=""
  fi
  for c in "${_eks_pods[@]}"; do
    [[ "$c" == "${c#--}" ]] && echo "$c"
  done | grep -Pe "$FILTER"
}

eks_list_pod_containers() {
  local PFILTER="${1-}"
  local CFILTER="${2-}"

  set $(eks_list_pods "$PFILTER")
  if [[ $# -le $EKS_POD_SEARCH_LIMIT ]]; then
    for pod; do
      for c in $(kubectl get pod $pod -o jsonpath="{.spec.containers[].name}"); do
        echo "$c"
      done
    done
  else
    for c in $(kubectl get pods -o jsonpath="{..spec.containers[].name}"); do
      echo "$c"
    done
  fi |
    grep -Pe "$CFILTER" | sort | uniq
}

_eks_load_clusters() {
  [ -n "$BCS_PROFILE" ] || return 0
  : "${EKS_CLUSTERS_SRC:=$(aws eks list-clusters --output text | awk '{print $2}' | tr -dc "$BCS_ADMISSIBLE_CHARS")}"
  eval "_eks_clusters=($EKS_CLUSTERS_SRC)"
  EKS_PODS_SRC=
  return 0
}

_eks_load_pods() {
  [ -n "$BCS_PROFILE" ] || return 0
  : "${EKS_PODS_SRC:=$(kubectl get pods "$@" --field-selector=status.phase=Running | (
    read -r _
    awk '{print $1}' | tr -dc "$BCS_ADMISSIBLE_CHARS"
  )) ${_eks_pods_flags[@]}}"
  eval "_eks_pods=($EKS_PODS_SRC)"
  return 0
}

eks_update_kubeconfig() {
  [[ $# -gt 0 ]] || set "$(kubectl config get-contexts | awk '/^\*/ { print $2 }' | cut -d/ -f2)"
  aws eks update-kubeconfig --name "$1"
  EKS_PODS_SRC=
  _eks_load_pods
}

eks_tools_ship_bg() {
  local FILTER="${1-}"
  local container="${2-}"
  [[ "$container" == "--" ]] && container=""

  for pod in $(eks_list_pods "$FILTER"); do
    for c in $(eks_list_pod_containers "^\\Q$pod\\E\$" "$container"); do
      for t in "${_bcs_tools[@]}"; do
        time kubectl exec -i $pod -c $c -- sh -c "mkdir -p /tmp/bin && cat >/tmp/bin/$t && chmod +x /tmp/bin/$t" <~/bin/$t &
      done
      kubectl exec $pod -c $c -- sh -c 'echo PATH="$PATH:/tmp/bin" > ~/.profile 2>/dev/null' &
      wait
      echo "Shipped ${stype-tools} to $pod/$c."
    done
  done
}

eks_scripts_ship_bg() {
  local PFILTER="$1"
  local CFILTER="$2"
  shift
  shift
  for script; do
    local s="$(basename "$script")"
    eks_batch "$PFILTER" "$CFILTER" "mkdir -p /tmp/bin && cat > /tmp/bin/$s && chmod +x /tmp/bin/$s" <"$script" &
  done
  wait
}

eks_bpftrace_ship_kheaders_bg() {
  local FILTER="${1-}"
  local container="${2-}"
  [[ "$container" == "--" ]] && container=""
  local wsl_kernel_version_major="$(uname -r)"
  wsl_kernel_version_major="${wsl_kernel_version_major%.**}"

  for pod in $(eks_list_pods "$FILTER"); do
    for c in $(eks_list_pod_containers "^\\Q$pod\\E\$" "$container"); do
      if ! kubectl exec $pod -c $c -- sh -c 'uname -r | grep -E "^$wsl_kernel_version_major[.]" \
      || (echo "Kernel major version mismatch $(uname -r): on $pod/$c, aborting!">&2 && false)'; then
        continue
      fi
      time kubectl exec -i $pod -c $c -- sh -c 'mkdir -p /tmp/kheaders-$(uname -r) && cd /tmp/kheaders-$(uname -r) && tar -xJf -' </sys/kernel/kheaders.tar.xz &
      time kubectl exec -i $pod -c $c -- sh -c 'mkdir -p /tmp/bin && cat >/tmp/bin/bpftrace && chmod +x /tmp/bin/bpftrace' <~/bin/bpftrace &
      kubectl exec $pod -c $c -- sh -c 'echo PATH="$PATH:/tmp/bin" > ~/.profile 2>/dev/null' &
      wait
    done
  done
}

eks_shell() {
  local FILTER="$1"
  local container="${2-}"
  shift
  [[ $# -gt 0 ]] && shift
  [[ "$container" == "--" ]] && container=""

  local TMP
  if [[ ! -t 0 ]]; then
    TMP="$(mktemp /tmp/eks-XXXX)"
    cat >$TMP
  fi

  for pod in $(eks_list_pods "$FILTER"); do
    for c in $(eks_list_pod_containers "^\\Q$pod\\E\$" "$container"); do
      if [[ -t 0 ]]; then
        kubectl exec -ti $pod -c $c -- sh -lc '[ -x /usr/bin/sudo ] && sudo ="sudo -E"; eval $sudo "$@"' -- "$@"
      else
        bcs_sed_uprobe_shared_libs kubectl exec $pod -c $c -- <$TMP | kubectl exec -i $pod -c $c -- sh -lc '[ -x /usr/bin/sudo ] && sudo="sudo -E"; eval $sudo "$@"' -- "$@"
      fi
    done
  done

  [[ -f "$TMP" ]] && rm -f $TMP
}

eks_htop_ship_config_bg() {
  local FILTER="$1"
  local container="${2-}"
  shift
  [[ $# -gt 0 ]] && shift
  [[ "$container" == "--" ]] && container=""

  for pod in $(eks_list_pods "$FILTER"); do
    for c in $(eks_list_pod_containers "^\\Q$pod\\E\$" "$container"); do
      kubectl -i $pod -c $c -- sh -c \
        '[ -x /usr/bin/sudo ] && sudo="sudo -E"; $sudo sh -c "mkdir -p ~/.config/htop && cat > ~/.config/htop/htoprc"' <~/.config/htop/htoprc &
    done
  done
  wait
}

eks_screen() {
  local FILTER="$1"
  local container="${2-}"
  shift
  [[ $# -gt 0 ]] && shift
  [[ "$container" == "--" ]] && container=""

  for pod in $(eks_list_pods "$FILTER"); do
    for c in $(eks_list_pod_containers "^\\Q$pod\\E\$" "$container"); do
      screen "$SHELL" -ic \
        "_bcs_title :$pod/$c: \"\$@\"; kubectl exec -ti $pod -c $c -- sh -lc '[ -x /usr/bin/sudo ] && sudo =\"sudo -E\"; eval \$sudo \"\$@\"' -- \"\$@\"" -- "$@"
    done
  done
}

function eks_batch() {
  local FILTER="$1"
  local container="$2"
  [[ "$container" == "--" ]] && container=""
  shift
  shift

  if [[ -t 1 ]]; then
    # ANSI color indexes: black = 0, red = 1, green = 2, cyan = 6
    # setaf = Set ANSI foreground
    # setab =  "   "   background
    # sgr0  = reset local color adjustments back to default terminal settings
    local errstr="$(tput bold)$(tput setaf 1)$(tput setab 0)error$(tput sgr0)"
    local prefix='$(tput bold)$(tput setaf 2)$pod$(tput sgr0)/$(tput setaf 6)$c$(tput sgr0)'
  else
    local errstr="error"
    local prefix='$pod/$c'
  fi

  local TMP
  if [[ ! -t 0 ]]; then
    TMP="$(mktemp /tmp/eks-XXXX)"
    cat >$TMP
  fi

  for pod in $(eks_list_pods "$FILTER"); do
    for c in $(eks_list_pod_containers "^\\Q$pod\\E\$" "$container"); do
      if [[ -t 0 ]]; then
        echo kubectl exec $pod -c $c -i -- \
          sh -lc '"([ -x /usr/bin/sudo ] && sudo=\"sudo -E\"; eval \"\$sudo \$0\" || echo \"'"$errstr"':\" \"(\"\$0\")\" failed with status code \$?) 2>&1 | while read -r line; do echo \"'"$(eval "echo \"$prefix\"")"':\" \$line; done"' \'"$@"\'
      else
        echo bcs_sed_uprobe_shared_libs kubectl exec $pod -c $c -- "<$TMP" '|' kubectl exec -i $pod -c $c -- \
          sh -lc '"([ -x /usr/bin/sudo ] && sudo=\"sudo -E\"; eval \"\$sudo \$0\" || echo \"'"$errstr"':\" \"(\"\$0\")\" failed with status code \$?) 2>&1 | while read -r line; do echo \"'"$(eval "echo \"$prefix\"")"':\" \$line; done"' \'"$@"\'
      fi
    done
  done |
    xargs -d '\n' -P $BCS_BATCH -i $SHELL -c '. ~/.bcsrc 2>/dev/null; {}'

  [[ -f "$TMP" ]] && rm -f $TMP
}

_eks_load_clusters >/dev/null 2>&1
_eks_load_pods >/dev/null 2>&1
